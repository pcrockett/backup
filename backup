#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
backup_usage() {
  if [[ -n $long_usage ]]; then
    printf "backup - A very opinionated backup tool\n"
    echo

  else
    printf "backup - A very opinionated backup tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  backup COMMAND\n"
  printf "  backup [COMMAND] --help | -h\n"
  printf "  backup --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initialize a new repository\n" "init "
  printf "  %s   Backup data to one or both repositories\n" "run  "
  printf "  %s   Check your backup repository for errors\n" "check"
  printf "  %s   Mount your backup repository\n" "mount"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
backup_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "backup init - Initialize a new repository\n"
    echo

  else
    printf "backup init - Initialize a new repository\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  backup init DESTINATION\n"
  printf "  backup init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  backup init s3\n"
    echo

  fi
}

# :command.usage
backup_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "backup run - Backup data to one or both repositories\n"
    echo

  else
    printf "backup run - Backup data to one or both repositories\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  backup run [OPTIONS]\n"
  printf "  backup run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dest, -d DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  backup run\n"
    printf "  backup run --dest s3\n"
    echo

  fi
}

# :command.usage
backup_check_usage() {
  if [[ -n $long_usage ]]; then
    printf "backup check - Check your backup repository for errors\n"
    echo

  else
    printf "backup check - Check your backup repository for errors\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  backup check [OPTIONS]\n"
  printf "  backup check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dest, -d DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--file, -f"
    printf "    Verify a file on your local device matches the backup\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  backup check\n"
    printf "  backup check --dest usb\n"
    printf "  backup check --file foo/bar.txt\n"
    echo

  fi
}

# :command.usage
backup_mount_usage() {
  if [[ -n $long_usage ]]; then
    printf "backup mount - Mount your backup repository\n"
    echo

  else
    printf "backup mount - Mount your backup repository\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  backup mount DESTINATION\n"
  printf "  backup mount --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/logging.sh
# shellcheck shell=bash

panic() {
    # for when you really shouldn't keep calm and carry on
    echo "FATAL: ${*}" >&2
    exit 1
}

not_implemented() {
    panic "Not implemented yet."
}

# src/lib/read_config.sh
# shellcheck shell=bash

read_config() {
    local config_file="${XDG_CONFIG_HOME:-${HOME}/.config}/backup/config.sh"
    # shellcheck disable=SC1090  # shellcheck shouldn't lint this file
    source "${config_file}"
}

# :command.command_functions
# :command.function
backup_init_command() {
  # src/init_command.sh
  # shellcheck shell=bash

  read_config

  RESTIC_PASSWORD_FILE="$(mktemp)"
  cleanup() {
      rm -f "${RESTIC_PASSWORD_FILE}"
  }
  trap 'cleanup' SIGINT SIGTERM EXIT

  echo "${RESTIC_E2EE_PASSWORD}" > "${RESTIC_PASSWORD_FILE}"
  export RESTIC_PASSWORD_FILE

  restic init

}

# :command.function
backup_run_command() {
  # src/run_command.sh
  # shellcheck shell=bash

  inspect_args
  not_implemented

}

# :command.function
backup_check_command() {
  # src/check_command.sh
  # shellcheck shell=bash

  inspect_args
  not_implemented

}

# :command.function
backup_mount_command() {
  # src/mount_command.sh
  # shellcheck shell=bash

  inspect_args
  not_implemented

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      backup_init_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      backup_run_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      backup_check_parse_requirements "$@"
      shift $#
      ;;

    mount)
      action="mount"
      shift
      backup_mount_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      backup_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
backup_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['destination']+x} ]]; then
    printf "missing required argument: DESTINATION\nusage: backup init DESTINATION\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
backup_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dest | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--dest']="$2"
          shift
          shift
        else
          printf "%s\n" "--dest requires an argument: --dest, -d DESTINATION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
backup_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dest | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--dest']="$2"
          shift
          shift
        else
          printf "%s\n" "--dest requires an argument: --dest, -d DESTINATION" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --file | -f)

        # :flag.case_no_arg
        args['--file']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
backup_mount_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_mount_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="mount"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['destination']+x} ]]; then
    printf "missing required argument: DESTINATION\nusage: backup mount DESTINATION\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -Eeuo pipefail

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") backup_init_command ;;
    "run") backup_run_command ;;
    "check") backup_check_command ;;
    "mount") backup_mount_command ;;
  esac
}

initialize
run "$@"
