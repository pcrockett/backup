#!/usr/bin/env bash
# This script was generated by bashly 1.2.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
backup_usage() {
  printf "backup - A very opinionated backup tool\n\n"

  printf "%s\n" "Usage:"
  printf "  backup COMMAND\n"
  printf "  backup [COMMAND] --help | -h\n"
  printf "  backup --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initialize a new repository\n" "init   "
  printf "  %s   Backup data to one or both repositories\n" "run    "
  printf "  %s   Check your backup repository for errors\n" "check  "
  printf "  %s   Mount your backup repository\n" "mount  "
  printf "  %s   Unmount your backup repository\n" "unmount"
  printf "  %s   View or edit your backup config\n" "config "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
backup_init_usage() {
  printf "backup init - Initialize a new repository\n\n"

  printf "%s\n" "Usage:"
  printf "  backup init DESTINATION\n"
  printf "  backup init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  backup init s3\n"
    echo

  fi
}

# :command.usage
backup_run_usage() {
  printf "backup run - Backup data to one or both repositories\n\n"

  printf "%s\n" "Usage:"
  printf "  backup run [OPTIONS]\n"
  printf "  backup run --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dest, -d DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  backup run\n"
    printf "  backup run --dest s3\n"
    echo

  fi
}

# :command.usage
backup_check_usage() {
  printf "backup check - Check your backup repository for errors\n\n"

  printf "%s\n" "Usage:"
  printf "  backup check [OPTIONS]\n"
  printf "  backup check --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dest, -d DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--file, -f"
    printf "    Verify a file on your local device matches the backup\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  backup check\n"
    printf "  backup check --dest usb\n"
    printf "  backup check --file foo/bar.txt\n"
    echo

  fi
}

# :command.usage
backup_mount_usage() {
  printf "backup mount - Mount your backup repository\n\n"

  printf "%s\n" "Usage:"
  printf "  backup mount DESTINATION\n"
  printf "  backup mount --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

  fi
}

# :command.usage
backup_unmount_usage() {
  printf "backup unmount - Unmount your backup repository\n\n"

  printf "%s\n" "Usage:"
  printf "  backup unmount DESTINATION\n"
  printf "  backup unmount --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "DESTINATION"
    printf "    Destination repository (s3 or usb)\n"
    echo

  fi
}

# :command.usage
backup_config_usage() {
  printf "backup config - View or edit your backup config\n\n"

  printf "%s\n" "Usage:"
  printf "  backup config [OPTIONS]\n"
  printf "  backup config --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--edit, -e"
    printf "    Open your config in \$EDITOR\n"
    echo

    # :flag.usage
    printf "  %s\n" "--no-pager, -n"
    printf "    Don't use \`bat\` or \`less\`\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/config.sh
# shellcheck shell=bash

config_dir() {
    echo "${XDG_CONFIG_HOME:-${HOME}/.config}/backup"
}

config_path() {
    echo "$(config_dir)/config.sh"
}

read_config() {
    local config_file
    config_file="$(config_path)"

    if [ -f "${config_file}" ]; then
        # shellcheck disable=SC1090  # shellcheck shouldn't lint this file
        source "${config_file}"
        generate_password_file
        return
    fi

    mkdir --parent "$(config_dir)"
    write_config_template "${config_file}"

    if [ "${EDITOR:-}" = "" ]; then
        log_info "template config file generated at:"
        log_info ""
        log_info "    ${config_file}"
        log_info ""
        log_info "edit this file before continuing"
        exit 1
    fi

    "${EDITOR}" "${config_file}"
    # shellcheck disable=SC1090  # shellcheck shouldn't lint this file
    source "${config_file}"
    generate_password_file
}

write_config_template() {
    cat > "${1}" <<EOF
# shellcheck shell=bash
#
# recommended: all this information should be stored in a password manager. this makes your life
# much easier when it's time to restore data later.
#
export AWS_ACCESS_KEY_ID="TODO"
export AWS_SECRET_ACCESS_KEY="TODO"
export RESTIC_REPOSITORY="s3:https://example.com/bucket-name"
export RESTIC_E2EE_PASSWORD="TODO"

BACKUP_PATHS=(
    "${HOME}"
    # TODO
)

EXCLUDE=(
    "*.lo"
    "*.o"
    "*.pyc"
    "*~"
    ".cache/"
    ".config/"
    ".git/"
    ".gradle/"
    ".idea/"
    ".jdks/"
    ".local/"
    ".npm/"
    ".nvm/"
    ".opam/"
    ".tmp/"
    ".var/"
    ".vscode-oss/extensions/"
    '\$RECYCLE.BIN'
    "Downloads/"
    "gvfs-metadata/"
    "lost+found/"
    "node_modules/"
    "venv/"
)
EOF
}

generate_password_file() {
    password_file="$(temp_file)"
    echo "${RESTIC_E2EE_PASSWORD}" > "${password_file}"
    export RESTIC_PASSWORD_FILE="${password_file}"
}

# src/lib/each.sh
# shellcheck shell=bash

each() {
    # iterate through stdin lines, and execute a command for each line.
    # the stdin line will be passed to the command as the last parameter.
    #
    # example usage:
    #
    #     printf 'foo\nbar' | each echo "you said: "
    #
    # outputs:
    #
    #     you said: foo
    #     you said: bar
    #
    while IFS= read -r line || [ -n "${line}" ]
    do
        "${@}" "${line}"
    done < <(cat)
}

# src/lib/lines.sh
# shellcheck shell=bash

lines() {
    # iterate through args, and output each one on a new line.
    #
    # example usage:
    #
    #     lines a b c
    #
    # outputs:
    #
    #     a
    #     b
    #     c
    #
    for i in "${@}"; do
        echo "${i}"
    done
}

# src/lib/logging.sh
# shellcheck shell=bash

panic() {
    # for when you really shouldn't keep calm and carry on
    echo "FATAL: ${*}" >&2
    exit 1
}

not_implemented() {
    panic "Not implemented yet."
}

log_info() {
    echo "${*}"
}

# src/lib/mount.sh
# shellcheck shell=bash

get_mount_dir() {
    local backup_dest="${1}"
    echo "${XDG_STATE_HOME}/backup/mount/${backup_dest}"
}

get_mount_pid_file() {
    local backup_dest="${1}"
    local pid_dir="${XDG_STATE_HOME}/backup/pid"
    mkdir --parent "${pid_dir}"
    echo "${pid_dir}/${backup_dest}"
}

is_mounted() {
    local dir_path="${1}"
    findmnt --raw --noheadings --output TARGET "${dir_path}" > /dev/null
}

wait_for_mount() {
    local dir_path="${1}"

    local MOUNT_TIMEOUT_SECONDS=20
    local iteration_count=0
    while ! is_mounted "${dir_path}"
    do
        iteration_count=$((iteration_count+1))

        if [ ${iteration_count} -gt ${MOUNT_TIMEOUT_SECONDS} ]; then
            panic "Unable to mount \"${dir_path}\" : timeout."
        else
            sleep 1
        fi
    done
}

# src/lib/temp_file.sh
# shellcheck shell=bash

temp_file() {
    # create a temp file in ${BACKUP_TEMP_DIR} and echo its file path to stdout
    # ${BACKUP_TEMP_DIR} will be deleted in [ref:before-hook]
    mktemp --tmpdir="${BACKUP_TEMP_DIR}"
}

# :command.command_functions
# :command.function
backup_init_command() {
  # src/init_command.sh
  # shellcheck shell=bash

  read_config
  restic init

}

# :command.function
backup_run_command() {
  # src/run_command.sh
  # shellcheck shell=bash

  read_config

  exclude_file="$(temp_file)"
  lines "${EXCLUDE[@]}" > "${exclude_file}"

  restic --verbose backup \
      --exclude-caches \
      --exclude-if-present ".nobackup" \
      --exclude-file "${exclude_file}" \
      "${BACKUP_PATHS[@]}"

}

# :command.function
backup_check_command() {
  # src/check_command.sh
  # shellcheck shell=bash

  read_config
  restic --verbose check --read-data-subset 100M

}

# :command.function
backup_mount_command() {
  # src/mount_command.sh
  # shellcheck shell=bash
  # shellcheck disable=SC2154

  read_config

  mount_dir="$(get_mount_dir "${args[destination]}")"
  mkdir --parent "${mount_dir}"

  if is_mounted "${mount_dir}"; then
      panic "Already mounted: ${mount_dir}"
  fi

  restic mount "${mount_dir}" &
  restic_pid=${!}
  echo "${restic_pid}" > "$(get_mount_pid_file "${args[destination]}")"

  wait_for_mount "${mount_dir}"  # make sure temp files aren't cleaned up before restic starts

}

# :command.function
backup_unmount_command() {
  # src/unmount_command.sh
  # shellcheck shell=bash
  # shellcheck disable=SC2154

  mount_dir="$(get_mount_dir "${args[destination]}")"

  if [ ! -d "${mount_dir}" ] || ! is_mounted "${mount_dir}"; then
      exit 0
  fi

  pid_file="$(get_mount_pid_file "${args[destination]}")"
  pid="$(head --lines 1 "${pid_file}")"
  kill -SIGTERM "${pid}"
  rm -f "${pid_file}"

}

# :command.function
backup_config_command() {
  # src/config_command.sh
  # shellcheck shell=bash

  config_file="$(config_path)"

  if [ ! -f "${config_file}" ]; then
      mkdir --parent "$(config_dir)"
      write_config_template "${config_file}"
  fi

  display_config() {
      if [ "${args[--no-pager]:-}" != "" ]; then
          cat "${config_file}"
          return
      fi

      if command -v bat &> /dev/null; then
          bat --language bash "${config_file}"
      elif command -v less &> /dev/null; then
          less "${config_file}"
      else
          cat "${config_file}"
      fi
  }

  edit_config() {
      if [ "${EDITOR:-}" == "" ]; then
          panic "\$EDITOR has not been set!"
      else
          "${EDITOR}" "${config_file}"
      fi
  }

  if [ "${args[--edit]:-}" == "" ]; then
      display_config
  else
      edit_config
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        backup_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init)
      action="init"
      shift
      backup_init_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      backup_run_parse_requirements "$@"
      shift $#
      ;;

    check)
      action="check"
      shift
      backup_check_parse_requirements "$@"
      shift $#
      ;;

    mount)
      action="mount"
      shift
      backup_mount_parse_requirements "$@"
      shift $#
      ;;

    unmount)
      action="unmount"
      shift
      backup_unmount_parse_requirements "$@"
      shift $#
      ;;

    config)
      action="config"
      shift
      backup_config_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      backup_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
backup_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['destination']+x} ]]; then
    printf "missing required argument: DESTINATION\nusage: backup init DESTINATION\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
backup_run_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="run"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dest | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--dest']="$2"
          shift
          shift
        else
          printf "%s\n" "--dest requires an argument: --dest, -d DESTINATION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
backup_check_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_check_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="check"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dest | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--dest']="$2"
          shift
          shift
        else
          printf "%s\n" "--dest requires an argument: --dest, -d DESTINATION" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --file | -f)

        # :flag.case_no_arg
        args['--file']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
backup_mount_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_mount_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="mount"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['destination']+x} ]]; then
    printf "missing required argument: DESTINATION\nusage: backup mount DESTINATION\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
backup_unmount_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_unmount_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="unmount"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['destination']+x} ]]; then
    printf "missing required argument: DESTINATION\nusage: backup unmount DESTINATION\n" >&2

    exit 1
  fi

}

# :command.parse_requirements
backup_config_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        backup_config_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="config"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --edit | -e)

        # :flag.case_no_arg
        args['--edit']=1
        shift
        ;;

      # :flag.case
      --no-pager | -n)

        # :flag.case_no_arg
        args['--no-pager']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.user_hooks
before_hook() {
  # src/before.sh
  # shellcheck shell=bash

  XDG_STATE_HOME="${XDG_STATE_HOME:-"${HOME}/.local/state"}"
  BACKUP_TEMP_DIR="$(mktemp --directory backup.XXXXXX)"

  on_exit() {
      rm -rf "${BACKUP_TEMP_DIR}"
  }
  trap 'on_exit' SIGINT SIGTERM EXIT

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -Eeuo pipefail

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"
  before_hook

  case "$action" in
    "init") backup_init_command ;;
    "run") backup_run_command ;;
    "check") backup_check_command ;;
    "mount") backup_mount_command ;;
    "unmount") backup_unmount_command ;;
    "config") backup_config_command ;;
  esac
}

initialize
run "$@"
